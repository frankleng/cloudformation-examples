---
# ha_willreplace_migrations.template.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: HA Will Replace Example

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
    - t2.nano
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceCount:
    Description: Number of EC2 instances to launch
    Type: Number
    Default: '1'
  InstanceCountMax:
    Description: Maximum number of EC2 instances to launch
    Type: Number
    Default: '6'
  InstanceImageId:
    Description: Image ID for EC2 instances
    Type: String

Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  PublicSshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable external SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  PublicWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable external web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  MigrationGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref  MigrationLaunchConfig
      DesiredCapacity: 1
      MinSize: 0
      MaxSize: 1
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  MigrationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref PublicSshSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --resource MigrationLaunchConfig --stack ${AWS::StackName} --region ${AWS::Region}
          yum install -y nginx
          service nginx start
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MigrationGroup --region ${AWS::Region}

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MigrationGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref  WebLaunchConfig
      DesiredCapacity: !Ref  InstanceCount
      MinSize: 1
      MaxSize: !Ref InstanceCountMax
      LoadBalancerNames:
        - !Ref WebElasticLoadBalancer
      HealthCheckGracePeriod: '300'
      HealthCheckType: ELB
    CreationPolicy:
      ResourceSignal:
        Count: !Ref InstanceCount
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  WebLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref PublicSshSecurityGroup
        - !Ref PublicWebSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --resource WebLaunchConfig --stack ${AWS::StackName} --region ${AWS::Region}
          yum install -y nginx
          service nginx start
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  WebElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'false'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicWebSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP

Outputs:
  AutoScalingGroup:
    Description: AutoScalingGroup ID for stack
    Value: !Ref WebServerGroup
  AutoScalingGroupMigration:
    Description: Migration AutoScalingGroup ID for stack
    Value: !Ref MigrationGroup
